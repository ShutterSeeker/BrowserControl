// Task		| By	| Date		    | Modification Description
// ---------|-------|---------------|-------------------------
// 25673	| RAB	| 05/23/2008	| Created
// 30560    | TDA   | 07/08/2008    | Added Upppercase Functions
// 28808    | KRG   | 07/08/2008    | Added formEventHandler.onKeyUpPagingScreen()
// 30560    | TDA   | 07/15/2008    | Modified Uppercase Functions, renamed onSubmitForGet to beforeSubmit, changed function names for key events
// 26936	| RAB	| 07/18/2008	| Renamed toIlsSessionString to toWebSessionString.
// 31502    | JAG   | 07/21/2008    | Added registerHyperlink
//          | TDA   | 07/22/2008    | Restructured
// 32194    | KRG   | 08/04/2008    | Unregistered shortcuts before submitting,
//                                  | disabled hyperlinks before submitting
// 31465    | TDA   | 08/06/2008    | Added processingBox
// 32978	| AC    | 08/12/2008    | Added replaceVariableData
// 36833    | TDA   | 09/29/2008    | Added applyEventReturnValue and redirect
// 33873	| DSK	| 01/20/08	    | Added ErrorType related to Account & Quantity
// 46767	| RAB	| 05/18/2009	| Added clientSession.assertLoggedIn and addToRequest.
// 54920    | AG    | 08/20/09      | Added labor logging related ErrorTypes
// 58804	| JAG	| 09/26/2009	| Added getLinkByName
// 57266	| JAG	| 09/28/2009	| Added MultiOrderPallet error type
// 70886	| SP 	| 08/04/2010	| Added clientSession.machineName as custom httpRequest Header
// 104226 	| SAM	| 12/17/2012	| Added isNumber 
// 106895 	| SAM	| 02/07/2013	| Added getElementValueById, focusById
// 109621   | DN    | 03/14/13      | Added itemCrossReference error type
// 131590   | GB    | 10/23/13      | Added validation for UserProfile and Serialize script errors.
// 157866   | MMM   | 03/27/15      | Added Confirmation value to ErrorType
// 159421   | SHS   | 06/17/15      | Added Carrier value to ErrorType 
// 153250   | DN	| 06/23/15      | Added ReceiptHeader,ApptDateTime,ReceivingDock
// 162884   | DN	| 06/23/15      | Added ImmediateNeedsRequest
// 165719   | SAM	| 09/01/15      | Removed registerStylesheet, used jquery to link external css
// 166316   | DN    | 09/13/15      | jquery.hotkeys upgrade
// 166943   | DN    | 09/20/15      | update sessvars to use pagehide event instead of unload as unload doesnt not work on ipad safari
// 169051   | MSR   | 12/08/15      | Modified code to make the RF app display properly in mobile devices
// 172230   | SAM   | 01/13/16      | Updated css file location
// 172835   | SAM   | 04/12/16      | Added isTouchDevice
// 176704   | SO    | 05/05/16      | Modified manh.ils.utilities.statusBox to prevent string truncate after special characters.
// 203572   | MHM   | 04/22/17      | Assigning value to the innerHTML property to avoid the HTML tags in the message box.
// 252097   | MDL   | 05/14/2020    | Added logging

/// <reference path="jquery.js" />
/// <reference path="jquery.hotkeys.js"/>

function dynamicallyLoadScript(url) {
    var script = document.createElement("script"); //Make a script DOM node
    script.src = url; //Set it's src to the provided URL
    document.head.appendChild(script); //Add it to the end of the head section of the page (could change 'head' to 'body' to add it to the end of the body section instead)
}

dynamicallyLoadScript('/scale/scripts/manh/Shared/manh.logging.js');

manh = {};

manh.ils = {
    getElementValueById: function (elementId){
        var htmlCtrl = document.getElementById(elementId);
        if (htmlCtrl)
            return htmlCtrl.value;
        else
            null;
    },

    focusById: function (elementId) {
        var htmlCtrl = document.getElementById(elementId);
        if (htmlCtrl
            && htmlCtrl.disabled == false
            && htmlCtrl.style.visibility != 'hidden'
            && htmlCtrl.style.display != 'none')
            return htmlCtrl.focus();
    },

    isNumber: function (stValue) {
        var valid = "0123456789";

        for (var i = 0; i < stValue.length; i++) {
            if (valid.indexOf(stValue.substring(i, i + 1)) == -1)
                return false;
        }

        return true;
    },

    isTouchDevice: function () {
        var msGesture = window.navigator && window.navigator.msPointerEnabled && window.MSGesture;
        return true == ("ontouchstart" in window || msGesture || window.Touch ||
            window.DocumentTouch && document instanceof DocumentTouch ||
            (navigator.maxTouchPoints > 0) || (navigator.msMaxTouchPoints > 0));
    }
};


/*
    json2.js
    2008-02-14

    Public Domain

    No warranty expressed or implied. Use at your own risk.

    See http://www.JSON.org/js.html

    This file creates a global JSON object containing two methods:

        JSON.serialize(value, whitelist)
            value       any JavaScript value, usually an object or array.

            whitelist   an optional array parameter that determines how object
                        values are stringified.

            This method produces a JSON text from a JavaScript value.
            There are three possible ways to serialize an object, depending
            on the optional whitelist parameter.

            If an object has a toJSON method, then the toJSON() method will be
            called. The value returned from the toJSON method will be
            stringified.

            Otherwise, if the optional whitelist parameter is an array, then
            the elements of the array will be used to select members of the
            object for stringification.

            Otherwise, if there is no whitelist parameter, then all of the
            members of the object will be stringified.

            Values that do not have JSON representaions, such as undefined or
            functions, will not be serialized. Such values in objects will be
            dropped; in arrays will be replaced with null.
            JSON.serialize(undefined) returns undefined. Dates will be
            stringified as quoted ISO dates.

            Example:

            var text = JSON.serialize(['e', {pluribus: 'unum'}]);
            // text is '["e",{"pluribus":"unum"}]'

        JSON.deserialize(text, filter)
            This method deserializes a JSON text to produce an object or
            array. It can throw a SyntaxError exception.

            The optional filter parameter is a function that can filter and
            transform the results. It receives each of the keys and values, and
            its return value is used instead of the original value. If it
            returns what it received, then structure is not modified. If it
            returns undefined then the member is deleted.

            Example:

            // deserialize the text. If a key contains the string 'date' then
            // convert the value to a date.

            myData = JSON.deserialize(text, function (key, value) {
                return key.indexOf('date') >= 0 ? new Date(value) : value;
            });

    This is a reference implementation. You are free to copy, modify, or
    redistribute.

    Use your own copy. It is extremely unwise to load third party
    code into your pages.
*/

/*jslint evil: true */

/*global JSON */

/*members "\b", "\t", "\n", "\f", "\r", "\"", JSON, "\\", apply,
    charCodeAt, floor, getUTCDate, getUTCFullYear, getUTCHours,
    getUTCMinutes, getUTCMonth, getUTCSeconds, hasOwnProperty, join, length,
    deserialize, propertyIsEnumerable, prototype, push, replace, serialize, test,
    toJSON, toString
*/

/// <summary>
///	Initializes json serializer for manh.ils.jsonSerializer
/// </summary>
function initializeJsonSerializer() {
    manh.ils.jsonSerializer = function () {

        function f(n) {    // Format integers to have at least two digits.
            return n < 10 ? '0' + n : n;
        }

        Date.prototype.toJSON = function () {

            // Eventually, this method will be based on the date.toISOString method.

            return this.getUTCFullYear()   + '-' +
                 f(this.getUTCMonth() + 1) + '-' +
                 f(this.getUTCDate())      + 'T' +
                 f(this.getUTCHours())     + ':' +
                 f(this.getUTCMinutes())   + ':' +
                 f(this.getUTCSeconds())   + 'Z';
        };


        var m = {    // table of character substitutions
            '\b': '\\b',
            '\t': '\\t',
            '\n': '\\n',
            '\f': '\\f',
            '\r': '\\r',
            '"' : '\\"',
            '\\': '\\\\'
        };

        function serialize(value, whitelist) {
            var a,          // The array holding the partial texts.
                i,          // The loop counter.
                k,          // The member key.
                l,          // Length.
                r = /["\\\x00-\x1f\x7f-\x9f]/g,
                v;          // The member value.

            switch (typeof value) {
                case 'string':

                    // If the string contains no control characters, no quote characters, and no
                    // backslash characters, then we can safely slap some quotes around it.
                    // Otherwise we must also replace the offending characters with safe sequences.

                    return r.test(value) ?
                        '"' + value.replace(r, function (a) {
                            var c = m[a];
                            if (c) {
                                return c;
                            }
                            c = a.charCodeAt();
                            return '\\u00' + Math.floor(c / 16).toString(16) +
                                                       (c % 16).toString(16);
                        }) + '"' :
                        '"' + value + '"';

                case 'number':

                    // JSON numbers must be finite. Encode non-finite numbers as null.

                    return isFinite(value) ? String(value) : 'null';

                case 'boolean':
                case 'null':
                    return String(value);

                case 'object':

                    // Due to a specification blunder in ECMAScript,
                    // typeof null is 'object', so watch out for that case.

                    if (!value) {
                        return 'null';
                    }

                    // If the object has a toJSON method, call it, and Serialize the result.

                    if (typeof value.toJSON === 'function') {
                        return serialize(value.toJSON());
                    }
                    a = [];
                    if (typeof value.length === 'number' &&
                            !(value.propertyIsEnumerable('length'))) {

                        // The object is an array. serialize every element. Use null as a placeholder
                        // for non-JSON values.

                        l = value.length;
                        for (i = 0; i < l; i += 1) {
                            a.push(serialize(value[i], whitelist) || 'null');
                        }

                        // Join all of the elements together and wrap them in brackets.

                        return '[' + a.join(',') + ']';
                    }
                    if (whitelist) {

                        // If a whitelist (array of keys) is provided, use it to select the components
                        // of the object.

                        l = whitelist.length;
                        for (i = 0; i < l; i += 1) {
                            k = whitelist[i];
                            if (typeof k === 'string') {
                                v = serialize(value[k], whitelist);
                                if (v) {
                                    a.push(serialize(k) + ':' + v);
                                }
                            }
                        }
                    } else {

                        // Otherwise, iterate through all of the keys in the object.

                        for (k in value) {
                            if (typeof k === 'string') {
                                v = serialize(value[k], whitelist);
                                if (v) {
                                    a.push(serialize(k) + ':' + v);
                                }
                            }
                        }
                    }

                    // Join all of the member texts together and wrap them in braces.

                    return '{' + a.join(',') + '}';
            }
        }

        return {
            serialize: serialize,
            deserialize: function (text, filter) {
                var j;

                function walk(k, v) {
                    var i, n;
                    if (v && typeof v === 'object') {
                        for (i in v) {
                            if (Object.prototype.hasOwnProperty.apply(v, [i])) {
                                n = walk(i, v[i]);
                                if (n !== undefined) {
                                    v[i] = n;
                                } else {
                                    delete v[i];
                                }
                            }
                        }
                    }

                        // MANH: The DataContractJsonSerializer serializes DateTime as "/Date(milliseconds[+-]GMT)/"
                        // MANH: Properly convert that to a JavaScript Date object.
                    else if (v
						&& typeof v === 'string'
						&& v.indexOf('/Date(') == 0)
                    {
                        return v[i] = eval("new Date(" + v.substring(6, v.length-2) + ")");
                    }

                    // MANH: if a filter was specified, allow it to have the last say.
                    return typeof filter === 'function' ? filter(k, v) : v;
                }


                // Parsing happens in three stages. In the first stage, we run the text against
                // regular expressions that look for non-JSON patterns. We are especially
                // concerned with '()' and 'new' because they can cause invocation, and '='
                // because it can cause mutation. But just to be safe, we want to reject all
                // unexpected forms.

                // We split the first stage into 4 regexp operations in order to work around
                // crippling inefficiencies in IE's and Safari's regexp engines. First we
                // replace all backslash pairs with '@' (a non-JSON character). Second, we
                // replace all simple value tokens with ']' characters. Third, we delete all
                // open brackets that follow a colon or comma or that begin the text. Finally,
                // we look to see that the remaining characters are only whitespace or ']' or
                // ',' or ':' or '{' or '}'. If that is so, then the text is safe for eval.

                if (/^[\],:{}\s]*$/.test(text.replace(/\\./g, '@').
replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, ']').
replace(/(?:^|:|,)(?:\s*\[)+/g, ''))) {

                    // In the second stage we use the eval function to compile the text into a
                    // JavaScript structure. The '{' operator is subject to a syntactic ambiguity
                    // in JavaScript: it can begin a block or an object literal. We wrap the text
                    // in parens to eliminate the ambiguity.

                    j = eval('(' + text + ')');

                    // MANH: walk the structure to massage data that JavaScript doesn't naturally eval.

                    return walk('', j);
                }

                // If the text is not JSON Deserializeable, then a SyntaxError is thrown.

                throw new SyntaxError('deserialize');
            }
        };
    }();
}

if (!this.manh.ils.jsonSerializer) 
{
    initializeJsonSerializer();
};

/*
sessvars ver 1.0
- JavaScript based session object
copyright 2008 Thomas Frank

This EULA grants you the following rights:

Installation and Use. You may install and use an unlimited number of copies of the SOFTWARE PRODUCT.

Reproduction and Distribution. You may reproduce and distribute an unlimited number of copies of the SOFTWARE PRODUCT either in whole or in part; each copy should include all copyright and trademark notices, and shall be accompanied by a copy of this EULA. Copies of the SOFTWARE PRODUCT may be distributed as a standalone product or included with your own product.

Commercial Use. You may sell for profit and freely distribute scripts and/or compiled scripts that were created with the SOFTWARE PRODUCT.

*/

manh.ils.clientSession=function(){

    var x={};

	x.$={
		prefs:{
			memLimit:2000,
			autoFlush:true,
			crossDomain:false,
			includeProtos:false,
			includeFunctions:true
		},
		parent:x,
		clearMem:function(){
			for(var i in this.parent){if(i!="$"){this.parent[i]=undefined}};
			this.flush();
		},
		usedMem:function(){
			x={};
			return Math.round(this.flush(x)/1024);
		},
		usedMemPercent:function(){
			return Math.round(this.usedMem()/this.prefs.memLimit);
		},
		flush:function(x){
			var y,o={};
			x=x||window;
			for(var i in this.parent){o[i]=this.parent[i]};
			o.$=this.prefs;
			if (!manh.ils.jsonSerializer) {
			    initializeJsonSerializer();
			}
			y=manh.ils.jsonSerializer.serialize(o);
			
			if(y.length/1024>this.prefs.memLimit){return false}
			x.name=y;
			return true;
		},
		getDomain:function(){
				var l=location.href
				l=l.split("///").join("//");
				l=l.substring(l.indexOf("://")+3).split("/")[0];
				while(l.split(".").length>2){l=l.substring(l.indexOf(".")+1)};
				return l
		},
		debug:function(t){
			t=t||this;
			var a=arguments.callee;
			if(!document.body){setTimeout(function(){a(t)},200);return};
			t.flush();
			var d=document.getElementById("sessvarsDebugDiv");
			if(!d){d=document.createElement("div");document.body.insertBefore(d,document.body.firstChild)};
			d.id="sessvarsDebugDiv";
			d.innerHTML='<div style="line-height:20px;padding:5px;font-size:11px;font-family:Verdana,Arial,Helvetica;'+
						'z-index:10000;background:#FFFFCC;border: 1px solid #333;margin-bottom:12px">'+
						'<b style="font-family:Trebuchet MS;font-size:20px">Session.js - debug info:</b><br/><br/>'+
						'Memory usage: '+t.usedMem()+' Kb ('+t.usedMemPercent()+'%)&nbsp;&nbsp;&nbsp;'+
						'<span style="cursor:pointer"><b>[Clear memory]</b></span><br/>'+
						top.name.split('\n').join('<br/>')+'</div>';
			d.getElementsByTagName('span')[0].onclick=function(){t.clearMem();location.reload()}
		},
		init:function(){
			var o={}, t=this;
			try {o=manh.ils.jsonSerializer.deserialize(window.name)} catch(e){o={}};
			this.prefs=o.$||t.prefs;
			if(this.prefs.crossDomain || this.prefs.currentDomain==this.getDomain()){
				for(var i in o){this.parent[i]=o[i]};
			}
			else {
				this.prefs.currentDomain=this.getDomain();
			};
			this.parent.$=t;
			t.flush();
			var f=function(){if(t.prefs.autoFlush){t.flush()}};
			if (window["addEventListener"]) { addEventListener("unload", f, false); addEventListener("pagehide", f, false) } 
			else if(window["attachEvent"]){window.attachEvent("onunload",f)}
			else {this.prefs.autoFlush=false};
		}
	};
	
	x.$.init();
	
	return x;
}()

manh.ils.clientSession.addToRequest = function(xmlHttpRequest){
	/// <summary>
	/// Adds session information to the HTTP request so that the server
	/// can establish the correct context.
	/// </summary>
	/// <param name="xmlHttpRequest">An XMLHttpRequest.</param>

	xmlHttpRequest.setRequestHeader("UserName", this.userName);
	xmlHttpRequest.setRequestHeader("Warehouse", this.warehouse);
	xmlHttpRequest.setRequestHeader("Environment", this.environment);
	xmlHttpRequest.setRequestHeader("MachineName", this.machineName);
};

manh.ils.clientSession.assertLoggedIn = function(){
	/// <summary>
	/// Throws a "NotLoggedInException" if the client session does not
	/// have data consistent with what would have been provided upon 
	/// successful logon.
	/// </summary>

	if (!this.userName) 
	{
		throw "NotLoggedInException";
	}
};

manh.ils.clientSession.toWebSessionString = function() {
	/// <summary>
	///	Creates a session string that describes the current user and
	/// is parsable by the server.
	/// </summary>

	this.assertLoggedIn();

	return this.userName + ":" +
		this.warehouse + ":" +
		this.environment + ":" +
		this.culture.name + ":" +
		this.machineName;
};

manh.ils.errorType =
{
	// these should stay in synch with the Manh.ILS.General.Interfaces.ErrorType enums.
	unknown: 0,
	container: 1,
	warehouse: 2,
	weight: 3,
	trackingNumber: 4,
	description: 5,
	criteria: 6,
	user: 7,
	item: 8,
	location: 9,
	shipFromName: 10,
	address1: 11,
	city: 12,
	country: 13,
	state: 14,
	postalCode: 15,
	warehouseCompanyAddress: 16,
	workInstruction: 17,
	toLocation: 18,
	fromLocation: 19,
	account: 20,
	quantity: 21,
	startDateTime: 22,
	endDateTime: 23,
	activityType: 24,
	multiOrderPallet: 25,
	itemCrossReference: 26,
	confirmation: 27,
	carrier : 28,
	receiptHeader : 29,
	apptDateTime : 30,
	receivingDock: 31,
	immediateNeedsRequest: 32
};

manh.ils.form = 
{   
    //The following are functions/members private to Manh.ILS.Form
    	
    
    _disableButtons: function()
    {
        /// <summary>
	    ///	Disables all buttons on the form.
	    /// </summary>
    	
        jQuery.each($(":button"),
           (function() 
               {
                this.disabled = true; 
              }
            ));
            
        jQuery.each($(":submit"),
           (function() 
               {
                this.disabled = true; 
              }
            ));
    },
    
    _disableLinks: function()
    {
        jQuery.each($("A"),
            function()
            {
                this.removeAttribute("href");
            }
            );
    },
    
    _registeredShortcuts: {},
    
    _unRegisterAllShortcuts: function()
	{
	    /// <summary>
		///	Should be called only before submission/unloading of the page
		/// </summary>
		for(var shortcutKey in this._registeredShortcuts)
		{
		    if(this._registeredShortcuts[shortcutKey])
		        $(document).unbind('keydown', this._registeredShortcuts[shortcutKey]);
		}
	},
 
	_upperCaseFields: function()
	{
	    /// <summary>
	    ///	Uppercases all fields with the "uppercase" class defined
	    /// </summary>
	   	jQuery.each($(".uppercase"),
           (function() 
               {     
                   this.value = this.value.toLocaleUpperCase(); 
              }
          ));
	},
	
	//The following are public functions of Manh.ILS.Form
	applyEventReturnValue: function(value)
	{
	    /// <summary>
	    ///	Handles setting event.returnValue.
	    /// </summary>
	    /// <param name="value" type="bool">True or False.</param>
	    event.returnValue = value;
	},
	
    beforeSubmit: function(form, action)
    {
	    /// <summary>
	    ///	Handles all processing that should occur before the form is submitted
	    /// </summary>
	    /// <param name="form" type="String">The form to submit.</param>
	    /// <param name="action" type="String">The new value of the form's action.</param>
	  
	    if(form)
	    {
	        manh.ils.utilities.processingBox.show(); 
	        //Disable buttons to prevent multiple submits
	    	this._disableButtons();
	    	
	    	//Disable links to prevent multiple submits
	    	this._disableLinks();
	    	
	    	//Unregister all shortcuts defined in the current document
	    	this._unRegisterAllShortcuts();
          
	        // add the session information to the form to pass to the server.
	        var hiddenField = document.createElement("input");
	        hiddenField.setAttribute("id", "session");
	        hiddenField.setAttribute("name", "session");
	        hiddenField.setAttribute("type", "hidden");
	        hiddenField.setAttribute("value", manh.ils.clientSession.toWebSessionString());
	        form.insertBefore(hiddenField,form.firstChild);
        	
        	//Uppercase any necessary values
            manh.ils.form._upperCaseFields();
            
            //Update the Pages "action"
	        form.action = action;
	    }
	    else
	    {
	        throw "FormNotInitializedException";
	    }
    },

	handleError: function(error)
	{
		/// <summary>
		///	displays an error box and cancels the current event.
		/// </summary>
		/// <param name="error" type="String">The error message to display.</param>
		alert(error);
		manh.ils.form.applyEventReturnValue(false);
	},

	redirect: function(location)
	{
	    /// <summary>
	    ///	Redirects to the given location.
	    /// </summary>
	    /// <param name="location" type="string">Page to redirect to.</param>
	    document.location.href = location;
    },
    
	registerEvent: function (id,event,eventHandler)
    {
        
        /// <summary>
		///	Handles cross browser support for attaching events
		/// </summary>
		/// <param name="object" type="object">The object that the event should be attached to.</param>
		/// <param name="event" type="string">The name of the event being attached. Do not include the "on" prefix.</param>
		/// <param name="eventHandler" type="function">The name of the eventHandler function to attach to.</param>
		
		if(id == "document")
		{
		    $(document).bind(event,eventHandler);
		}
		else
		{
		   id = "#" + id;
		   $(id).bind(event,eventHandler);
	    }
	},
	
	registerHyperlink:function(object, link)
	{
	
	    /// <summary>
		///	Registers the link for a hyperlink
		/// </summary>
		/// <param name="object" type="object">The hyperlink that is being defined.</param>
		/// <param name="link" type="string">Redirection URL</param>
		
	    if (object)
            object.setAttribute('href', link);
	},
	
	registerPagingScreenShortcuts: function()
	{
	    if(window.onPreviousPage)
	        this.registerShortcut('f7',onPreviousPage);
	        
	    if(window.onNextPage)
	        this.registerShortcut('f8',onNextPage);
	},
	
	registerShortcut: function(keyCombination,eventhandler)
	{
	    if(eventhandler)
	    {
	        $(document).bind('keydown', keyCombination, eventhandler);
	        this._registeredShortcuts[keyCombination] = eventhandler;
	    }
	},
	
	
	unRegisterShortcut : function(keyCombination, eventhandler)
	{
	    if(eventhandler)
	    {
	        $(document).unbind('keydown', eventhandler);
	        this._registeredShortcuts[keyCombination] = null;
	    }
	},
	
	unRegisterEvent: function (id,event,eventHandler)
    {
        
        /// <summary>
		///	Handles cross browser support for attaching events
		/// </summary>
		/// <param name="object" type="object">The object that the event should be attached to.</param>
		/// <param name="event" type="string">The name of the event being attached. Do not include the "on" prefix.</param>
		/// <param name="eventHandler" type="function">The name of the eventHandler function to attach to.</param>
		
		if(id == "document")
		{
		    $(document).unbind(event,eventHandler);
		}
		else
		{
		   id = "#" + id;
		   $(id).unbind(event,eventHandler);
	    }
	},
	
	unRegisterPagingShortcuts: function()
	{
	    if(window.onPreviousPage)
	        this.unRegisterShortcut('f7',onPreviousPage);
	        
	    if(window.onNextPage)
	        this.unRegisterShortcut('f8',onNextPage);
	}
};

manh.ils.utilities = {};

manh.ils.utilities.processingBox = 
{
        create: function()
        {
            /// <summary>
		    ///	Adds the processing box div to the screen
		    /// </summary>
		    /// <remarks>
		    /// The style of the processing box should be defined in the .css using an id selector of #processingBox.
		    /// </remarks>
		    
            var box = document.createElement("div");
		    box.setAttribute("id", "processingBox");
		    box.innerHTML = manh.ils.clientSession.processingText;
	        $("#wrapper").append(box);
        },
        
        show: function()
	    {
	        /// <summary>
		    ///	Makes the processingBox visible. 
		    /// </summary>
		    /// <remarks>
		    /// The style of the processing box should be defined in the .css using an id selector of #processingBox.
		    /// </remarks>
		
            var box = document.getElementById("processingBox");
            
            if(box == undefined)
                manh.ils.utilities.processingBox.create();
            else
                $("#processingBox").className = "showDiv";
	    },
	
	    hide: function(e)
	    {
	        /// <summary>
		    ///	Hides the processing box div from the screen
		    /// </summary>
		    /// <remarks>
		    /// The style of the processing box should be defined in the .css using an id selector of #processingBox.
		    /// </remarks>
		
             $("#processingBox").className = "hideDiv";
	    }
};

manh.ils.utilities.statusBox = 
{       
        show: function(innerHTML)
	    {
		    /// <summary>
		    ///	Displays a status box for the given text/html.
		    /// </summary>
		    /// <remarks>
		    /// The style of the status box should be defined in the .css using an id selector of #statusBox.
		    /// </remarks>
		    /// <param name="innerHTML" type="String">The message to display in the box.  Supports html.</param>
    		
		    var sb = document.createElement("div");
		    sb.setAttribute("id", "statusBox");
		    sb.innerHTML = innerHTML;

            $("#wrapper").append(sb);
		    manh.ils.form.registerEvent("document","keydown", manh.ils.utilities.statusBox.hide);
		    manh.ils.form.registerEvent("document","mousedown", manh.ils.utilities.statusBox.hide);
	    },
	
	    hide: function(e)
	    {
		    /// <summary>
		    ///	Hides the status box.
		    /// </summary>
		    /// <remarks>
		    /// This event should be autoregistered by show.
		    /// </remarks>
    		
    		$("#statusBox").remove();
    		manh.ils.form.unRegisterEvent("document","keydown", manh.ils.utilities.statusBox.hide);
		    manh.ils.form.unRegisterEvent("document","mousedown", manh.ils.utilities.statusBox.hide);
	    }
};

manh.ils.utilities.valueFormatter = 
{
	convertNumberToInvariant: function(number)
	{
		/// <summary>
		///	Converts a localized number to the invariant culture.
		/// </summary>
		/// <param name="number" type="String">The localized number as a string.</param>
		/// <returns type="String">Returns the number parameter in the invariant culture.</returns>

		if (!manh.ils.clientSession.culture)
			throw "NotLoggedInException";

		//Remove the group separator using a regular expression to guarantee all instances are replaced
		number = number.replace(new RegExp("[" + manh.ils.clientSession.culture.groupSeparator + "]", "g"),"");
		number = number.replace(manh.ils.clientSession.culture.decimalSeparator,manh.ils.clientSession.culture.invariantDecimalSeparator);
		return number;        
	},
	
	formatNumber: function(number, decimalPos)
	{
		/// <summary>
		///	Converts a number to a localized string.
		/// </summary>
		/// <param name="number" type="Number">The number to format.</param>
		/// <param name="decimalPos" type="Number" integer="true">The number of decimal positions to return.</param>
		/// <returns type="String">Returns a localized representation of the number.</returns>
	
		if (!manh.ils.clientSession.culture)
			throw "NotLoggedInException";

		var numberString = number.toFixed(decimalPos);
		numberString = numberString.replace(manh.ils.clientSession.culture.invariantDecimalSeparator, manh.ils.clientSession.culture.decimalSeparator);
		return numberString;
	},
	replaceVariableData : function(text,variableData)
	{
		if(variableData instanceof Array)
		{
			for(var i=1 ; i<variableData.length+1;i++)
			{	
				text = text.replace("&"+i,variableData[i-1]);
			}
			return text;
		}
	}
};
manh.ils.utilities.linkRetrieval =
{
	getLinkByName: function(links, linkName) {
		var link = null;
		if (links) {
			for (i = 0; i < links.length; i++) {
				var link = links[i];

				if (link && link.rel === linkName)
					return link.href;
			}
		}
		return null;
	}
}
$(document).ready(
    function() 
    {
       //Define the stylesheet for the page automatically
        if(manh.ils.clientSession && manh.ils.clientSession.UserProfile)
            $('head').append('<link rel="stylesheet" href="Content/manh/css/' + manh.ils.clientSession.UserProfile.rfStylesheet + '" type="text/css" />');
        $('head').append('<link rel="stylesheet" href="Content/offline/css/offline-theme-chrome-indicator.css" type="text/css" />');
            
      if(window.onSubmit)
      {
            //Hook up the "enter" key to all "dropdown" fields, remove when they lose focus
          $(document).bind('focus', 'return', onSubmit);   
          $(document).unbind('blur', onSubmit);
            
      }
        
        
      if (window.onCancel)
      {
            //Hook up the "F9" on cancel
            manh.ils.form.registerShortcut('f9',onCancel);
      }
    }
);
